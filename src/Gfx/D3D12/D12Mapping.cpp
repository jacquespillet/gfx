#include "D12Mapping.h"
#include <dxgi.h>
namespace gfx
{

const char *SemanticFromAttrib(vertexComponentFormat::values Format)
{
    // Float, Float2, Float3, Float4, Mat4, Byte, Byte4N, UByte, UByte4N, Short2, Short2N, Short4, Short4N, Uint, Uint2, Uint4, Count
    switch (Format)
    {
    case vertexComponentFormat::Float2:
    case vertexComponentFormat::Float3:
    case vertexComponentFormat::Float4:
    case vertexComponentFormat::Mat4:
    case vertexComponentFormat::Byte4N:
    case vertexComponentFormat::UByte4N:
    case vertexComponentFormat::Short2:
    case vertexComponentFormat::Short2N:
    case vertexComponentFormat::Short4:
    case vertexComponentFormat::Short4N:
    case vertexComponentFormat::Uint2:
    case vertexComponentFormat::Uint4:
        return AllocateCString("POSITION");
        break;
    case vertexComponentFormat::Float:
        return AllocateCString("BLENDWEIGHT");
        break;
    case vertexComponentFormat::Uint:
    case vertexComponentFormat::Byte:
    case vertexComponentFormat::UByte:
        return AllocateCString("BLENDINDICES");
        break;

    
    default:
        break;
    }
}

// Float, Float2, Float3, Float4, Mat4, Byte, Byte4N, UByte, UByte4N, Short2, Short2N, Short4, Short4N, Uint, Uint2, Uint4, Count
   
static DXGI_FORMAT VertexAttribFormatTable[] = 
{
    DXGI_FORMAT_R32_FLOAT,
    DXGI_FORMAT_R32G32_FLOAT,
    DXGI_FORMAT_R32G32B32_FLOAT,
    DXGI_FORMAT_R32G32B32A32_FLOAT,
    DXGI_FORMAT_R32G32B32A32_FLOAT, //MAT4 : How to do ??
    DXGI_FORMAT_R8_SINT,
    DXGI_FORMAT_R8G8B8A8_SNORM,
    DXGI_FORMAT_R8_UNORM,
    DXGI_FORMAT_R8G8B8A8_UNORM,
    DXGI_FORMAT_R16G16_SINT,
    DXGI_FORMAT_R16G16_SNORM,
    DXGI_FORMAT_R16G16B16A16_SINT,
    DXGI_FORMAT_R16G16B16A16_SNORM,
    DXGI_FORMAT_R32_UINT,
    DXGI_FORMAT_R32G32_UINT,
    DXGI_FORMAT_R32G32B32A32_UINT
};


DXGI_FORMAT AttribFormatToNative(vertexComponentFormat::values Format)
{
    return VertexAttribFormatTable[(u32)Format];
}

D3D12_INPUT_CLASSIFICATION  VertexInputRateToNative(vertexInputRate::values Rate)
{
    if(Rate == vertexInputRate::PerVertex)
    {
        return D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA;   
    }
    else
    {
        return D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA;   
    }
}   


static DXGI_FORMAT FormatTable[] = 
{
    DXGI_FORMAT_UNKNOWN,//UNDEFINED = 0,
    DXGI_FORMAT_UNKNOWN,//R4G4_UNORM_PACK_8,
    DXGI_FORMAT_UNKNOWN,//R4G4B4A4_UNORM_PACK_16,
    DXGI_FORMAT_UNKNOWN,//B4G4R4A4_UNORM_PACK_16,
    DXGI_FORMAT_UNKNOWN,//R5G6B5_UNORM_PACK_16,
    DXGI_FORMAT_UNKNOWN,//B5G6R5_UNORM_PACK_16,
    DXGI_FORMAT_UNKNOWN,//R5G5B5A1_UNORM_PACK_16,
    DXGI_FORMAT_UNKNOWN,//B5G5R5A1_UNORM_PACK_16,
    DXGI_FORMAT_UNKNOWN,//A1R5G5B5_UNORM_PACK_16,
    DXGI_FORMAT_R8_UNORM,//R8_UNORM,
    DXGI_FORMAT_R8_SNORM,//R8_SNORM,
    DXGI_FORMAT_R8_UNORM,//R8_USCALED,
    DXGI_FORMAT_R8_UNORM,//R8_SSCALED,
    DXGI_FORMAT_R8_UINT,//R8_UINT,
    DXGI_FORMAT_R8_SINT,//R8_SINT,
    DXGI_FORMAT_UNKNOWN,//R8_SRGB,
    DXGI_FORMAT_R8G8_UNORM,//R8G8_UNORM,
    DXGI_FORMAT_R8G8_SNORM,//R8G8_SNORM,
    DXGI_FORMAT_R8G8_UNORM,//R8G8_USCALED,
    DXGI_FORMAT_R8G8_UNORM,//R8G8_SSCALED,
    DXGI_FORMAT_R8G8_UINT,//R8G8_UINT,
    DXGI_FORMAT_R8G8_SINT,//R8G8_SINT,
    DXGI_FORMAT_UNKNOWN,//R8G8_SRGB,
    DXGI_FORMAT_R8G8B8A8_UNORM,//R8G8B8_UNORM,
    DXGI_FORMAT_R8G8B8A8_SNORM,//R8G8B8_SNORM,
    DXGI_FORMAT_R8G8B8A8_UNORM,//R8G8B8_USCALED,
    DXGI_FORMAT_R8G8B8A8_UNORM,//R8G8B8_SSCALED,
    DXGI_FORMAT_R8G8B8A8_UINT,//R8G8B8_UINT,
    DXGI_FORMAT_R8G8B8A8_SINT,//R8G8B8_SINT,
    DXGI_FORMAT_UNKNOWN,//R8G8B8_SRGB,
    DXGI_FORMAT_UNKNOWN,//B8G8R8_UNORM,
    DXGI_FORMAT_UNKNOWN,//B8G8R8_SNORM,
    DXGI_FORMAT_B8G8R8A8_UNORM,//B8G8R8_USCALED,
    DXGI_FORMAT_B8G8R8A8_UNORM,//B8G8R8_SSCALED,
    DXGI_FORMAT_UNKNOWN,//B8G8R8_UINT,
    DXGI_FORMAT_UNKNOWN,//B8G8R8_SINT,
    DXGI_FORMAT_UNKNOWN,//B8G8R8_SRGB,
    DXGI_FORMAT_R8G8B8A8_UNORM,//R8G8B8A8_UNORM,
    DXGI_FORMAT_R8G8B8A8_SNORM,//R8G8B8A8_SNORM,
    DXGI_FORMAT_R8G8B8A8_UNORM,//R8G8B8A8_USCALED,
    DXGI_FORMAT_R8G8B8A8_UNORM,//R8G8B8A8_SSCALED,
    DXGI_FORMAT_R8G8B8A8_UINT,//R8G8B8A8_UINT,
    DXGI_FORMAT_R8G8B8A8_SINT,//R8G8B8A8_SINT,
    DXGI_FORMAT_UNKNOWN,//R8G8B8A8_SRGB,
    DXGI_FORMAT_B8G8R8A8_UNORM,//B8G8R8A8_UNORM,
    DXGI_FORMAT_UNKNOWN,//B8G8R8A8_SNORM,
    DXGI_FORMAT_B8G8R8A8_UNORM,//B8G8R8A8_USCALED,
    DXGI_FORMAT_B8G8R8A8_UNORM,//B8G8R8A8_SSCALED,
    DXGI_FORMAT_UNKNOWN,//B8G8R8A8_UINT,
    DXGI_FORMAT_UNKNOWN,//B8G8R8A8_SINT,
    DXGI_FORMAT_UNKNOWN,//B8G8R8A8_SRGB,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_UNORM_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_SNORM_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_USCALED_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_SSCALED_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_UINT_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_SINT_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A8B8G8R8_SRGB_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2R10G10B10_UNORM_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2R10G10B10_SNORM_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2R10G10B10_USCALED_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2R10G10B10_SSCALED_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2R10G10B10_UINT_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2R10G10B10_SINT_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2B10G10R10_UNORM_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2B10G10R10_SNORM_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2B10G10R10_USCALED_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2B10G10R10_SSCALED_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2B10G10R10_UINT_PACK_32,
    DXGI_FORMAT_UNKNOWN,//A2B10G10R10_SINT_PACK_32,
    DXGI_FORMAT_R16_UNORM,//R16_UNORM,
    DXGI_FORMAT_R16_SNORM,//R16_SNORM,
    DXGI_FORMAT_R16_UNORM,//R16_USCALED,
    DXGI_FORMAT_R16_UNORM,//R16_SSCALED,
    DXGI_FORMAT_R16_UINT,//R16_UINT,
    DXGI_FORMAT_R16_SINT,//R16_SINT,
    DXGI_FORMAT_R16_FLOAT,//R16_SFLOAT,
    DXGI_FORMAT_R16G16_UNORM,//R16G16_UNORM,
    DXGI_FORMAT_R16G16_SNORM,//R16G16_SNORM,
    DXGI_FORMAT_R16G16_TYPELESS,//R16G16_USCALED,
    DXGI_FORMAT_R16G16_TYPELESS,//R16G16_SSCALED,
    DXGI_FORMAT_R16G16_UNORM,//R16G16_UINT,
    DXGI_FORMAT_R16G16_SINT,//R16G16_SINT,
    DXGI_FORMAT_R16G16_FLOAT,//R16G16_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_UNORM,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_SNORM,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_USCALED,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_SSCALED,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_UINT,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_SINT,
    DXGI_FORMAT_UNKNOWN,//R16G16B16_SFLOAT,
    DXGI_FORMAT_R16G16B16A16_UNORM,//R16G16B16A16_UNORM,
    DXGI_FORMAT_R16G16B16A16_SNORM,//R16G16B16A16_SNORM,
    DXGI_FORMAT_R16G16B16A16_TYPELESS,//R16G16B16A16_USCALED,
    DXGI_FORMAT_R16G16B16A16_TYPELESS,//R16G16B16A16_SSCALED,
    DXGI_FORMAT_R16G16B16A16_UINT,//R16G16B16A16_UINT,
    DXGI_FORMAT_R16G16B16A16_SINT,//R16G16B16A16_SINT,
    DXGI_FORMAT_R16G16B16A16_FLOAT,//R16G16B16A16_SFLOAT,
    DXGI_FORMAT_R32_UINT,//R32_UINT,
    DXGI_FORMAT_R32_SINT,//R32_SINT,
    DXGI_FORMAT_R32_FLOAT,//R32_SFLOAT,
    DXGI_FORMAT_R32G32_UINT,//R32G32_UINT,
    DXGI_FORMAT_R32G32_SINT,//R32G32_SINT,
    DXGI_FORMAT_R32G32_FLOAT,//R32G32_SFLOAT,
    DXGI_FORMAT_R32G32B32_UINT,//R32G32B32_UINT,
    DXGI_FORMAT_R32G32B32_SINT,//R32G32B32_SINT,
    DXGI_FORMAT_R32G32B32_FLOAT,//R32G32B32_SFLOAT,
    DXGI_FORMAT_R32G32B32A32_UINT,//R32G32B32A32_UINT,
    DXGI_FORMAT_R32G32B32A32_SINT,//R32G32B32A32_SINT,
    DXGI_FORMAT_R32G32B32A32_FLOAT,//R32G32B32A32_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//R64_UINT,
    DXGI_FORMAT_UNKNOWN,//R64_SINT,
    DXGI_FORMAT_UNKNOWN,//R64_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//R64G64_UINT,
    DXGI_FORMAT_UNKNOWN,//R64G64_SINT,
    DXGI_FORMAT_UNKNOWN,//R64G64_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//R64G64B64_UINT,
    DXGI_FORMAT_UNKNOWN,//R64G64B64_SINT,
    DXGI_FORMAT_UNKNOWN,//R64G64B64_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//R64G64B64A64_UINT,
    DXGI_FORMAT_UNKNOWN,//R64G64B64A64_SINT,
    DXGI_FORMAT_UNKNOWN,//R64G64B64A64_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//B10G11R11_UFLOAT_PACK_32,
    DXGI_FORMAT_UNKNOWN,//E5B9G9R9_UFLOAT_PACK_32,
    DXGI_FORMAT_D16_UNORM,//D16_UNORM,
    DXGI_FORMAT_UNKNOWN,//X8D24_UNORM_PACK_32,
    DXGI_FORMAT_D32_FLOAT,//D32_SFLOAT,
    DXGI_FORMAT_UNKNOWN,//S8_UINT,
    DXGI_FORMAT_UNKNOWN,//D16_UNORM_S8_UINT,
    DXGI_FORMAT_D24_UNORM_S8_UINT,//D24_UNORM_S8_UINT,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,//D32_SFLOAT_S8_UINT,
};

DXGI_FORMAT FormatToNative(format Format)
{
    return FormatTable[(u64)Format];
}


D3D12_RESOURCE_STATES ImageUsageToResourceState(imageUsage::bits Usage)
{
    switch (Usage)
    {
    case imageUsage::UNKNOWN:
        return D3D12_RESOURCE_STATE_COMMON;
    case imageUsage::TRANSFER_SOURCE:
        return D3D12_RESOURCE_STATE_COPY_SOURCE;
    case imageUsage::TRANSFER_DESTINATION:
        return D3D12_RESOURCE_STATE_COPY_DEST;
    case imageUsage::SHADER_READ:
        return D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;
    case imageUsage::STORAGE:
        return D3D12_RESOURCE_STATE_UNORDERED_ACCESS;
    case imageUsage::COLOR_ATTACHMENT:
        return D3D12_RESOURCE_STATE_RENDER_TARGET;
    case imageUsage::DEPTH_STENCIL_ATTACHMENT:
        return D3D12_RESOURCE_STATE_DEPTH_WRITE;
    case imageUsage::INPUT_ATTACHMENT:
        return D3D12_RESOURCE_STATE_COMMON; // ???
    case imageUsage::FRAGNENT_SHADING_RATE_ATTACHMENT:
        return D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE;
    default:
        assert(false);
        return D3D12_RESOURCE_STATE_COMMON;
    }    
}


}